/**
  * Copyright (c) 2013-2017  Patrick Nicolas - Scala for Machine Learning - All rights reserved
  *
  * Licensed under the Apache License, Version 2.0 (the "License") you may not use this file
  * except in compliance with the License. You may obtain a copy of the License at
  *
  * http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software is distributed on an
  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *
  * The source code in this file is provided by the author for the sole purpose of illustrating the
  * concepts and algorithms presented in "Scala for Machine Learning 2nd edition".
  * ISBN: 978-1-783355-874-2 Packt Publishing.
  *
  * Version 0.99.2
  */
package org.scalaml.scalability.akka

import akka.actor.{ActorSystem, Props}
import akka.pattern.ask
import akka.util.Timeout
import org.scalaml.Logging
import org.scalaml.Predef.DblVec
import org.scalaml.filtering.dft.DFT
import org.scalaml.scalability.akka.message._
import org.scalaml.util.FormatUtils._
import org.scalatest.{FlatSpec, Matchers}

/**
  * Specialized Akka futures for the distributed discrete Fourier transform.
  * @constructor Create a set of futures for the distributed discrete Fourier transform.
  * @throws IllegalArgumentException if the time series or the partitioner are not defined.
  *
  * @author Patrick Nicolas
  * @since 0.98.2 (June 5, 2014)
  * @version 0.99.2
  * @note Scala for Machine Learning Chapter 16 Scalable frameworks/Akka
  */
final class DFTFutures(
  xt: DblVec,
  partitions: Int
)(implicit timeout: Timeout) extends TFutures(xt, DFT[Double].|>, partitions) {

  private val SPECTRUM_WIDTH = 64

  /**
    * Method to aggregate (reducer) the results for the discrete Fourier transform on
    * each worker.
    * @param data array of values (vector of Double) generated by each worker actor
    * @return Sequence of frequencies
    */
  override protected def reduce(data: Array[DblVec]): Seq[Double] = {
    require(
      data != null && data.length > 0,
      "DFTTransformFutures.aggregate Output of one of the workers undefined"
    )

    val results = data.map(_.toArray).transpose.map(_.sum).take(SPECTRUM_WIDTH)
    val freq_str = format(results, "", SHORT)
    show(s"Index frequencies\n$freq_str")
    results.toSeq
  }
}

/**
  * '''Purpose''': Singleton to evaluate Scala/Akka futures
  *
  * @author Patrick Nicolas
  * @note Scala for Machine Learning Chapter 16 Parallelism / Akka framework / futures
  */
final class TFuturesTest extends FlatSpec with Matchers with Logging {
  import scala.concurrent.duration.Duration
  import scala.util.Random

  /**
    * Name of the evaluation
    */
  protected[this] val name: String = "Scala futures"

  private val NUM_WORKERS = 8
  private val NUM_DATA_POINTS = 1000000
  private val h = (x: Double) => 2.0 * Math.cos(Math.PI * 0.005 * x) + // simulated first harmonic
    Math.cos(Math.PI * 0.05 * x) + // simulated second harmonic
    0.5 * Math.cos(Math.PI * 0.2 * x) + // simulated third harmonic
    0.2 * Random.nextDouble

  private val TimeOut = 5000L
  private val duration = Duration(TimeOut, "millis")
  implicit val timeout = new Timeout(duration)


  it should s"$name Data transformation futures using Akka actors" in {
    show("$name Data transformation futures using Akka actors")

    val actorSystem = ActorSystem("System")
    val xt = Vector.tabulate(NUM_DATA_POINTS)(h(_))

    val master = actorSystem.actorOf(
      Props(new DFTFutures(xt, NUM_WORKERS)),
      "DFTTransform"
    )

    val future = master ? Start()
    Thread.sleep(TimeOut)

    actorSystem.shutdown()
  }
}

// -----------------------------------------------  EOF ---------------------------