/**
 * Copyright (c) 2013-2017  Patrick Nicolas - Scala for Machine Learning - All rights reserved
 *
 * Licensed under the Apache License, Version 2.0 (the "License") you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *
 * The source code in this file is provided by the author for the sole purpose of illustrating the
 * concepts and algorithms presented in "Scala for Machine Learning 2nd edition".
 * ISBN: 978-1-783355-874-2 Packt Publishing.
 *
 * Version 0.99.2
 */
package org.scalaml.reinforcement.xcs

import scala.util.Random

import org.scalaml.trading.Signal
import org.scalaml.trading.operator.EQUAL
import org.scalaml.ga.{Operator, Gene, Quantization}
import org.scalaml.reinforcement.qlearning.QLState
import org.scalaml.Predef._
import XcsRule._
import org.scalaml.ga.Chromosome
import Gene._

/**
 * Class that defined a action associated to a sensor and a target value. A typical
 * action is a sensor exceeding a target value (or threshold). XCS action are defined
 * as gene so they can be chained as chromosomes and define a strategy to optimize the
 * operation of a system.
 * @constructor Create an XCS action.
 * @param sensorId identifier of the sensor for which an action may be triggered or fired
 * @param target threshold value associated to a sensor to trigger the action
 *
 * @author Patrick Nicolas
 * @since March 24, 2014
 * @note Scala for Machine Learning Chapter 11 Reinforcement learning / Extended learning
 * classifier systems
 */
final class XcsAction(
  sensorId: String,
  override val target: Double
)(implicit quant: Quantization[Double], encoding: Encoding) extends Gene[Double](sensorId, target, EQUAL)



object XcsAction {
  val XCSACTION_SIZE = 32
  def apply(action: XcsAction, r: Random): XcsAction =
    (action ^ r.nextInt(XCSACTION_SIZE)).asInstanceOf[XcsAction]
}

/**
 * Class that define a rule or policy in XCS algorithm. The rule is encoded as a gene so
 * it can be manipulated by the Genetic Algorithm. A rule is defined by the format:
 *
 * <i>IF signal THEN action</i>.
 *
 * The constructor increase a global rules count used to automatically assigned a label to each signal/predicate.
 * @param signal Input signal generated by the system
 * @param action Action to be performed upon the system
 * @author Patrick Nicolas
 * @since 0.98.1 March 24, 2014
 * @see Scala for Machine Learning Chapter 11 Reinforcement learning / Extended learning
 * classifier systems
 */
case class XcsRule(signal: Signal, action: XcsAction)

/**
 * Companion singleton for the XCS rule, The object defines the XcsSensor type as
 * a trading signal.
 *
 * @author Patrick Nicolas
 * @since March 24, 2014
 * @note Scala for Machine Learning Chapter 11 Reinforcement learning / Extended learning
 * classifier systems
 */
object XcsRule {
  type XcsSensor = Signal
}

// -----------------------------------------  EOF ----------------------------------------